{"version":3,"sources":["components/paramItem.jsx","App.js","reportWebVitals.js","index.js"],"names":["ParamItem","class","for","this","props","queryName","className","id","name","type","value","React","Component","urlSearchParams","URLSearchParams","window","location","search","urlParams","Object","fromEntries","entries","App","useSearchParams","searchParams","searchKeys","Array","from","console","log","rows","i","length","push","keys","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAEMA,E,4JACF,WACE,OAAO,sBAAKC,MAAM,aAAX,UACL,uBAAOC,IAAKC,KAAKC,MAAMC,UAAvB,SAAmCF,KAAKC,MAAMC,YAC9C,sBAAKC,UAAU,2BAAf,UACA,uBAAOA,UAAU,mBAAmBC,GAAIJ,KAAKC,MAAMC,UAAWG,KAAML,KAAKC,MAAMC,UAAWI,KAAK,OAAOC,MAAOP,KAAKC,MAAMM,QACxH,wBAAQD,KAAK,SAASH,UAAU,oBAAhC,oC,GANgBK,IAAMC,WAYfZ,I,OCXTa,EAAkB,IAAIC,gBAAgBC,OAAOC,SAASC,QACtDC,EAAYC,OAAOC,YAAYP,EAAgBQ,WA+BtCC,MA1Bf,WAEE,MAAsCC,cAAtC,mBAAKC,EAAL,KACIC,GADJ,KACiBC,MAAMC,KAAKH,EAAaH,YACzCO,QAAQC,IAAIJ,GAGZ,IADA,IAAIK,EAAO,GACFC,EAAI,EAAGA,EAAIN,EAAWO,OAAQD,IACnCD,EAAKG,KAAK,cAAC,EAAD,CAAmB5B,UAAWoB,EAAWM,GAAG,GAAIrB,MAAOe,EAAWM,GAAG,IAArDA,IAE9B,OACE,sBAAKzB,UAAU,MAAf,UAEGwB,EACD,mCACE,6CACA,sJACmC,IAAlCX,OAAOe,KAAKhB,GAAWc,QAExB,mBAAGG,KAAK,+CAAR,6BChBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,IAAD,UACE,cAAC,EAAD,QAKFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a31cee1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ParamItem extends React.Component {\r\n    render() {\r\n      return <div class=\"param-item\">\r\n        <label for={this.props.queryName}>{this.props.queryName}</label>\r\n        <div className=\"param-item-input-wrapper\">\r\n        <input className=\"param-item-input\" id={this.props.queryName} name={this.props.queryName} type=\"text\" value={this.props.value}/>\r\n        <button type=\"button\" className=\"param-item-button\">ðŸ’¾</button></div> \r\n      </div>;\r\n    }\r\n  }\r\n\r\n\r\nexport default ParamItem;","import './App.css';\nimport ParamItem from './components/paramItem.jsx';\nimport { useSearchParams } from 'react-router-dom';\nconst urlSearchParams = new URLSearchParams(window.location.search);\nconst urlParams = Object.fromEntries(urlSearchParams.entries());\n\n\n\n\nfunction App() {\n\n  let [searchParams, setSearchParams] = useSearchParams();\n  let searchKeys = Array.from(searchParams.entries());\n  console.log(searchKeys);\n\n  var rows = [];\n  for (var i = 0; i < searchKeys.length; i++) {\n      rows.push(<ParamItem key={i} queryName={searchKeys[i][0]} value={searchKeys[i][1]}/>);\n  }\n  return (\n    <div className=\"app\">\n      \n      {rows}\n      <header>\n        <h1>my callback</h1>\n        <p>What the..? This is a simple solution to a simple problem. Callback here, from wherever and output your query params.</p>\n        {Object.keys(urlParams).length === 0 &&\n        \n        <a href=\"?code=mysupersecretcode&width=100&height=100\">Try this</a>\n        }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n  <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>\n  ,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}